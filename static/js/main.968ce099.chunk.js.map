{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["getMenus","menuStr","qs","prop","arg","a","split","args","hasOwnProperty","e","console","log","getJsonFromUrl","window","location","search","menus","map","menu","name","decodeURIComponent","count","App","useState","menuList","setMenuList","Menu","m","index","menuName","inc","useCallback","increment","dec","filter","decrement","ListItem","key","ButtonGroup","color","aria-label","Button","className","onClick","newMenuName","setNewMenuName","TextField","value","onChange","target","id","label","variant","push","includes","commaSeperatedMenus","join","getUrlParameter","url","origin","pathname","href","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.968ce099.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport TextField from '@material-ui/core/TextField';\nimport ListItem from '@material-ui/core/ListItem';\nimport './App.css';\n\nfunction getJsonFromUrl(qs) {\n  if (!qs) return {};\n  try {\n    let a = qs.split('?')[1].split('#')[0].split('&');\n    let prop;\n    let arg;\n    let args = {};\n\n    for (prop in a) {\n      if (a.hasOwnProperty(prop)) {\n        arg = a[prop].split('=');\n        args[arg[0]] = arg[1];\n      }\n    }\n    return args;\n  } catch (e) {\n    console.log('Parsing Error', qs);\n    return {};\n  }\n}\n\n\nfunction getMenus() {\n  const menuStr = getJsonFromUrl(window.location.search).menus;\n  if (menuStr) {\n    const menuList = menuStr.split(',');\n    return menuList.map(menu => ({ name: decodeURIComponent(menu), count: 1 }));\n  } else {\n    return [\n      { name: '아아', count: 0 },\n      { name: '아라', count: 0 },\n      { name: '따아', count: 0 },\n      { name: '따라', count: 0 },\n    ];\n  }\n}\n\nfunction App() {\n  const [ menuList, setMenuList ] = useState(getMenus());\n\n  const increment = menuName => {\n    setMenuList(menuList.map(m => {\n      if (m.name === menuName) {\n        m.count = m.count + 1;\n      }\n      return m;\n    }));\n  };\n\n  const decrement = menuName => {\n    setMenuList(menuList.map(m => {\n      if (m.name === menuName) {\n        m.count = m.count - 1;\n      }\n      return m;\n    }).filter(m => {\n      return m.count !== -1;\n    }));\n  };\n\n  function getUrlParameter(menuList) {\n    return '?menus=' + menuList.map(m => m.name).join(',');\n  }\n\n  function Link({ menuList }) {\n    const commaSeperatedMenus = getUrlParameter(menuList);\n    const { origin, pathname } = window.location;\n    const url = origin + pathname + commaSeperatedMenus;\n    return (\n      <a href={url}>{url}</a>\n    );\n  }\n\n  function Menu({ menu }) {\n    const m = menu.menu;\n    const index = menu.index;\n\n    const menuName = m.name;\n    const inc = useCallback(\n      () => {\n        increment(menuName);\n      },\n      [menuName]\n    );\n\n    const dec = useCallback(\n      () => {\n        decrement(menuName);\n      },\n      [menuName]\n    );\n\n    return (\n      <ListItem>\n        <div key={ index } >\n          <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n            <Button className=\"button\" onClick={ inc }><span className=\"title is-6\">+</span></Button>\n            <Button className=\"button\"><span className=\"title is-6\">{ `${m.name} (${m.count})` }</span></Button>&nbsp;\n            <Button className=\"button\" onClick={ dec }><span className=\"title is-6\">-</span></Button>\n          </ButtonGroup>\n        </div>\n      </ListItem>\n    );\n  }\n\n  const [ newMenuName, setNewMenuName ] = useState('');\n\n  function addMenu() {\n    if (newMenuName) {\n      menuList.push({ name: newMenuName, count: 1 });\n      setMenuList(menuList);\n      setNewMenuName('');\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <ListItem>\n        <TextField value={newMenuName} onChange={e => setNewMenuName(e.target.value)} id=\"standard-basic\" label=\"Menu Name\" />\n        <Button variant=\"contained\" color=\"primary\" onClick={ addMenu }>이거요</Button>\n      </ListItem>\n      {\n        menuList && menuList.filter(m => {\n          return newMenuName ? m.name.includes(newMenuName) : true;\n        }).map((m, index) => {\n          const menu = { menu: m, index };\n          return <Menu key={index} menu={menu} />;\n        })\n      }\n      <ListItem>\n        <Link menuList={menuList} />\n      </ListItem>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}